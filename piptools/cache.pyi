from typing import *

from pip._internal.req import InstallRequirement

from .exceptions import PipToolsError

# 1st key: a package name; 2nd key: its version; values: requirements strings.
PkgName = NewType("PkgName", str)
PkgVersionAndExtras = NewType("PkgVersionAndExtras", str)

CacheItem = Collection[str]
CacheKey = Tuple[PkgName, PkgVersionAndExtras]
Cache = Mapping[PkgName, Mapping[PkgVersionAndExtras, CacheItem]]

# TODO: Renamed to LookupTable?
ReversedDependencies = Mapping[str, Collection[str]]

def _implementation_name() -> str: ...

class CorruptCacheError(PipToolsError):
    path: str
    def __init__(self, path: str) -> None: ...
    def __str__(self) -> str: ...

def read_cache_file(cache_file_path: str) -> Cache: ...

class DependencyCache(object):
    _cache_file: str
    _cache: Optional[Cache]
    def __init__(self, cache_dir: str) -> None: ...
    @property
    def cache(self) -> Cache: ...
    def as_cache_key(self, ireq: InstallRequirement) -> CacheKey: ...
    def read_cache(self) -> None: ...
    def write_cache(self) -> None: ...
    def clear(self) -> None: ...
    def __contains__(self, ireq: InstallRequirement) -> bool: ...
    def __getitem__(self, ireq: InstallRequirement) -> CacheItem: ...
    def __setitem__(self, ireq: InstallRequirement, values: CacheItem) -> None: ...
    def reverse_dependencies(
        self, ireqs: Iterable[InstallRequirement]
    ) -> ReversedDependencies: ...
    def _reverse_dependencies(
        self, cache_keys: Iterable[CacheKey]
    ) -> ReversedDependencies: ...
